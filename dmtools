#!/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
import click
import os.path
from utils import save, load
from campaign_map import campaign_map
from dice import roll
from story import story
from reference import ref
from share import share

# configure logging


@click.group()
@click.option('--data-location', default="data.json")
@click.option('--logfile', default="log.txt")
@click.pass_context
def cli(ctx, data_location, logfile):
    ctx.obj["data_location"] = data_location


    logger = logging.getLogger('simple_example')

    ch = logging.FileHandler(logfile)

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    logger.setLevel(logging.INFO)

#####################
# Initialization

@click.command()
@click.option('--campaign-title', default="Campaign Title")
@click.option('--campaign-description', default="Campaign Description")
@click.option('--overwrite', is_flag=True, default=False)
@click.pass_context
def init(ctx, campaign_title, campaign_description, overwrite):
    default_campaign= {
        "title": campaign_title,
        "description": campaign_description,
        "story": [],
        "campaign_maps": {}
    }

    campaign_exists = os.path.exists(ctx.obj["data_location"])
    if (campaign_exists and overwrite) or not campaign_exists:
        save(ctx, default_campaign)
        print("Campaign file created!")
    elif map_exists and not overwrite:
        print("Campaign file already exists. Use --overwrite to overwrite existing file.")


##########################
# Root group definition
cli.add_command(init)
cli.add_command(campaign_map)
cli.add_command(roll)
cli.add_command(story)
cli.add_command(ref)
cli.add_command(share)



if __name__ == "__main__":
    cli(obj={})

