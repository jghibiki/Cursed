#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
import click
import os.path
from utils import save, load
from app_server import run as start_app_server
import curses
import logging

# configure logging
log = None 


@click.group()
@click.option('--data-location', default="data.json", help="Location of the cursed data.json file to use (Default: data.json).")
@click.option('--logfile', default="log.txt", help="Change the location of the log file (Default: log.txt).")
@click.pass_context
def cli(ctx, data_location, logfile):
    """
    \b
    To get started hosting a campaign server, run:
    cursed init [OPTIONS]
    cursed map add [OPTIONS] MAP_NAME
    cursed server [OPTIONS] MAP_NAME

    \b 
    To get started joining a campaign, run
    cursed gm [OPTIONS] USERNAME GM_PASSWORD
    or 
    cursed pc [OPTIONS] USERNAME PC_PASSWORD

    Note: Running cused init is only required once to initialize a data.json file. Future sessions do not need to recreate this file.

    Note: Suffix any command with --help to view help information about that command.
    """
    ctx.obj["data_location"] = data_location


    logger = logging.getLogger('simple_example')

    ch = logging.FileHandler(logfile)

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    logger.setLevel(logging.INFO)
    global log
    log = logger

#####################
# Initialization

@click.command()
@click.option('--campaign-title', default="Campaign Title", help="A title for the campaign file to be created.")
@click.option('--campaign-description', default="Campaign Description", help="A description for the campaign to be created.")
@click.option('--overwrite', is_flag=True, default=False, help="A flag to toggle allow overwriting the data.json file. By default, this is not allowed.")
@click.pass_context
def init(ctx, campaign_title, campaign_description, overwrite):
    """Initialize a Cursed campaign file."""
    default_campaign= {
        "title": campaign_title,
        "description": campaign_description,
        "story": [],
        "maps": {},
        "chat": []
    }

    campaign_exists = os.path.exists(ctx.obj["data_location"])
    if (campaign_exists and overwrite) or not campaign_exists:
        save(ctx, default_campaign)
        print("Campaign file created!")
    elif campaign_exists and not overwrite:
        print("Campaign file already exists. Use --overwrite to overwrite existing file.")

@click.command()
@click.option("--port", default=8080, help="The port the server should run on.")
@click.option("--host", default="0.0.0.0", help="The host ip to use. 127.0.0.1 will only allow connections from localhost clients. 0.0.0.0 will allow connections from any client.")
@click.option("--gm-password", default=None, help="Set a gm password. If not set, the gm password will be a randomly generated four digit code.")
@click.option("--password", default=None, help="Set a pc password. If not set, the pc password will be a randomly generated four digit code.") 
@click.argument("map_name")
@click.pass_context
def server(ctx, port, host, map_name, gm_password, password):
    """
    Starts a server
    """
    game_data = load(ctx)
    if map_name in game_data["maps"]:
        def save_callback(data):
            save(ctx, data)
        start_app_server(game_data, port, host, gm_password, password, map_name, save_callback)
    else:
        click.echo("Map %s does not exist. Please create map with:\n cursed map add OPTIONS MAP_NAME" % map_name)


@click.command("gm")
@click.option("--host", default="127.0.0.1", help="The ip or hostname of the Cursed server to connect to.")
@click.option("--port", default=8080, help="The port of the Cursed server to connect to." )
@click.option("--wsad", is_flag=True, default=False, help="Enable wsad control scheme. Defaults to vim style (kjhl) control scheme.")
@click.argument("username")
@click.argument("password")
@click.pass_context
def gm(ctx, host, port, wsad, username, password):
    """
    Join a dmtools server.
    """
    os.environ.setdefault('ESCDELAY', '5')
    curses.wrapper(_join, ctx, "gm", host, port, username, wsad, password)



@click.command("pc")
@click.option("--host", default="127.0.0.1", help="The ip or hostname of the Cursed server to connect to.")
@click.option("--port", default=8080, help="The port of the Cursed server to connect to.")
@click.option("--wsad", is_flag=True, default=False, help="Enable wsad controm scheme. Defaults to vim tyle (kjhl) control scheme.")
@click.argument("username")
@click.argument("password")
@click.pass_context
def pc(ctx, host, port, wsad, username, password):
    """
    Join a dmtools server.
    """
    os.environ.setdefault('ESCDELAY', '5')
    curses.wrapper(_join, ctx, "pc", host, port, username, wsad, password)

def _join(scr, ctx, role, host, port, username, wsad, password):
    from colors import Colors
    Colors.init()

    from features import init_features
    from features import load_features

    init_features()

    # load viewer
    from viewer import Viewer
    viewer = Viewer(scr)

    # load submodules
    from screen import Screen
    screen = Screen(scr)
    viewer.register_submodule(screen)

    from viewport import Viewport
    viewport = Viewport()
    viewer.register_submodule(viewport)

    from text_box import TextBox
    tb = TextBox()
    viewer.register_submodule(tb)

    from colon_line import ColonLine
    colon_line = ColonLine()
    viewer.register_submodule(colon_line)

    from client import Client
    client = Client(password, host=host, port=port)
    viewer.register_submodule(client)

    from command_window import CommandWindow
    cw = CommandWindow()
    viewer.register_submodule(cw)

    from state import State
    state = State()
    state.set_state("role", role)
    state.set_state("direction_scheme", "wsad" if wsad else "vim")
    state.set_state("username", username)
    viewer.register_submodule(state)

    from chat import Chat
    chat = Chat()
    viewer.register_submodule(chat)

    from status_line import StatusLine
    sl = StatusLine()
    viewer.register_submodule(sl)

    from roll import Roll
    roll = Roll()
    viewer.register_submodule(roll)

    from map import Map
    map = Map()
    viewer.register_submodule(map)

    if role == "gm":
        from gm import GM
        gm = GM()
        viewer.register_submodule(gm)

        from editor import Editor
        editor = Editor()
        viewer.register_submodule(editor)

        from narrative import Narrative
        narrative = Narrative()
        viewer.register_submodule(narrative)

    elif role == "pc":
        from pc import PC
        pc = PC()
        viewer.register_submodule(pc)

    log.debug("running viewer")
    viewer.run()


# Maps add / rm / list
@click.group("map")
@click.pass_context
def campaign_map(ctx):
    """Add, list, and remove campaign maps."""
    pass

@click.command("add")
@click.option("--max-x", default=100, type=int, help="The width of the map to be created.")
@click.option("--max-y", default=100, type=int, help="The height of the map to be created.")
@click.argument("map_name")
@click.pass_context
def add_map(ctx, max_x, max_y, map_name):
    """Add a new campaign map."""
    campaign_obj = load(ctx)

    campaign_obj["maps"][map_name] = {
        "max_x": max_x,
        "max_y": max_y,
        "features": [],
        "units": [],
        "fow": [ [ False for y in range(max_y) ] for x in range(max_x) ]
    }

    save(ctx, campaign_obj)

@click.command("rm")
@click.argument("map_name")
@click.pass_context
def remove_map(ctx, map_name):
    """Remove an existing campaign map."""
    campaign_obj = load(ctx)
    del campaign_obj["maps"][map_name]
    save(ctx, campaign_obj)

@click.command("list")
@click.pass_context
def list(ctx):
    """List campaign maps."""
    campaign_obj = load(ctx)
    intro = "%s" % campaign_obj["title"]
    pad = len(intro)*"="
    print("%s\n%s\n%s\nMaps:" % (pad, intro, pad))
    for cmap in campaign_obj["maps"].keys():
        print("|-> %s" % cmap)


campaign_map.add_command(add_map)
campaign_map.add_command(remove_map)
campaign_map.add_command(list)



##########################
# Root group definition
cli.add_command(init)
cli.add_command(server)
cli.add_command(gm)
cli.add_command(pc)
cli.add_command(campaign_map)



if __name__ == "__main__":
    cli(obj={})

